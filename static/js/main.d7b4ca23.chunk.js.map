{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","advice","setAdvice","loading","setLoading","error","message","setError","getter","a","fetch","response","status","Error","json","data","slip","console","log","useEffect","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOA0CeA,EAvCH,WACV,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,mBAAS,CACjCK,OAAO,EACPC,QAAS,KAFX,mBAAOD,EAAP,KAAcE,EAAd,KAIMC,EAAM,uCAAG,8BAAAC,EAAA,sEAEXL,GAAW,GAFA,SAGYM,MAAM,qCAHlB,UAIa,OADlBC,EAHK,QAIEC,OAJF,sBAKH,IAAIC,MAAM,mBALP,uBAOQF,EAASG,OAPjB,OAOLC,EAPK,OAQXb,EAAUa,EAAKC,MACfC,QAAQC,IAAIH,GACZX,GAAW,GAVA,kDAYXG,EAAS,CAAEF,OAAO,EAAMC,QAAS,KAAMA,UAZ5B,0DAAH,qDAoBZ,OAJAa,qBAAU,WACRX,MACC,IAECH,EAAMA,MACD,6BAAKA,EAAMC,UAGlB,gCACE,8CACCH,EAAU,2CAAoB,6BAAKF,EAAOA,SAC3C,wBAAQmB,QAASZ,EAAjB,0BCzBSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d7b4ca23.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nconst App = () => {\n  const [advice, setAdvice] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({\n    error: false,\n    message: '',\n  });\n  const getter = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('https://api.adviceslip.com/advice');\n      if (response.status !== 200) {\n        throw new Error('THE API IS DOWN');\n      }\n      const data = await response.json();\n      setAdvice(data.slip);\n      console.log(data);\n      setLoading(false);\n    } catch (error) {\n      setError({ error: true, message: error.message });\n    }\n  };\n\n  useEffect(() => {\n    getter();\n  }, []);\n\n  if (error.error) {\n    return <h1>{error.message}</h1>;\n  }\n  return (\n    <div>\n      <h1>hello Im app</h1>\n      {loading ? <p>loading...</p> : <h2>{advice.advice}</h2>}\n      <button onClick={getter}>get data</button>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}